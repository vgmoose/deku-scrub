<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lvm | Deku Scrub]]></title>
  <link href="//vgmoose.github.io/deku-scrub/blag//blog/categories/lvm/atom.xml" rel="self"/>
  <link href="//vgmoose.github.io/deku-scrub/blag//"/>
  <updated>2014-06-19T00:54:08-04:00</updated>
  <id>//vgmoose.github.io/deku-scrub/blag//</id>
  <author>
    <name><![CDATA[Ricky Ayoub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day 13: Conference Call and the Slicer]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/06/09/day-13-more-boot-problems-and-the-slicer/"/>
    <updated>2014-06-09T19:53:17-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/06/09/day-13-more-boot-problems-and-the-slicer</id>
    <content type="html"><![CDATA[<p>Another Monday. My documentation work is slowly making progress. Although there are still some confusing things, they seem to stem from the fact that I&rsquo;ve been mixing and mashing different versions of lvmthin. Things are stable again, for the moment.</p>

<p><img class="center <a" src="href="http://www.shespeaks.com/pages/img/review/apple-slicer-corer_09092011161645.JPG">http://www.shespeaks.com/pages/img/review/apple-slicer-corer_09092011161645.JPG</a>"></p>

<p>The Slicer is a utility that is not provided to the employees, so I am responsible to bring it myself from home. Its primary function is transforming the non-edible fruit in the break room into something that can be consumed by any given human. One simply takes the Slicer and places it atop the target, before pressing their full body weight down on it. After this, the individual pieces can be collected and taken back to the owner&rsquo;s cubicle.</p>

<p>Really though, it has made eating the apples much easier. I&rsquo;m told an apple a day keeps the doctor away, and it seems that <a href="http://jasonseattlethings.tumblr.com/post/86971544360/day-four-wednesday-may-21st">I am not the only one</a> who thinks this way. I suppose time will tell though.</p>

<p>There&rsquo;s something I neglected to mention in my last posting: on June 4th I took part in my first ever biweekly conference call. SIDEBAR: biweekly can mean EITHER &ldquo;twice a week&rdquo; or &ldquo;every other week&rdquo;. In this case it is tha latter.</p>

<p><img class="center <a" src="href="http://www.oit.uci.edu/images/7960G%20Large.jpg">http://www.oit.uci.edu/images/7960G%20Large.jpg</a>"></p>

<p>I can&rsquo;t say the coonference call didn&rsquo;t bring back some painful memories of jobs past. Once you join the call and enter the code on the keypad, you have to state your name followed by the pound symbol. When I first did this, I said my full name and then hit pound. It quickly occurred to me that that probably didn&rsquo;t look that good. Sure enough, when other people started joining they all had one syllable names that they quickly said. Whenever someone joined the conference call, a voice would announce &ldquo;[PERSON] has joined the call&rdquo; using their voice as [PERSON]. Thankfully, I believe that I was the first perosn to join, and made sure that I was the last person to leave, so I don&rsquo;t think that anyone heard me foolishly say out my whole name.</p>

<p>Tomorrow is the launch date of RHEL7, which is on a two and a half year release cycle. So that should be INTERESTING.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 12: Kernel Upgrading and Reinstallation]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/06/06/day-12-kernel-upgrading-and-reinstallation/"/>
    <updated>2014-06-06T19:32:48-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/06/06/day-12-kernel-upgrading-and-reinstallation</id>
    <content type="html"><![CDATA[<p>The toolset <code>lvmcache</code> is special in that it isn&rsquo;t supported in the default kernel that ships with Fedora 20. My RHEL7 machines (and partition on my laptop) have no issues using it, but it would be most useful to have functioning on my laptop. After a lot of researching I learned that it eventually boiled down to the version of the linux kernel that I was using.</p>

<p><code>
uname -r
</code></p>

<p>The above command reports information about the kernel. I was running 3.11, which does not have <a href="https://github.com/mingzhao/dm-cache">dm-cache</a> support. The README lists instructions on how to compile the kernel module, but I had mixed results. My knowledge of how a kernel is actually compiled is severly limited given my previous userland background, but that didn&rsquo;t mean that I wasn&rsquo;t ready to give it my all. The short explanation is that it may not have been as simple as the instructions made it out to be. The long explanation is that I spent a long time downloading various kernel sources and headers  trying to recompile and add this module to the kernel.</p>

<p>The process is all very official and streamlined, but it still gave me some issues. For that reason, I am choosing <em>not</em> to include the instructions here, for fear that someone else will build upon my mistakes. After I finally seemed to have everything functioning, I didn&rsquo;t actually know how to &ldquo;activate&rdquo; it. When flashing kernels on Android, it&rsquo;s always fairly obvious. I mean, you usually just go to recovery and literally flash it. There&rsquo;s no concept of multiple kernels or anything.</p>

<p><code>
sudo yum update kernel
</code></p>

<p>It should be noted here that, prior to deciding to jump in and compile my own kernel, I had tried the simple above command. When I first typed it, I thought I was an idiot, it couldn&rsquo;t be so simple. Once it actually started to download and install kernel 3.14 though, I then felt very satisfied. Upon rebooting though, the kernel still wasn&rsquo;t activated. Well, to get back to my own compiled kernel, the case was the same for that. Neither the updated kernel from yum nor my own custom kernel seemed to be activated.</p>

<p>I&rsquo;m not sure if I missed something along the lines, and I was getting increasingly frustrated, so I performed a reinstall of Fedora 20. As you know, my home directory is on another partition, so all of my data and preferences were still intact. Still though, my kernel refused to update. Then it hit me, and things started to click into place. The whole manner in which my system functions is it loads a kernel into ram from a /boot physical partition selected via grub, and this kernel then mounts and loads the filesystem and all its contents.</p>

<p>Well, as it turned out that was an oversimplication. It would seem that the grub bootloader entries actually contain information about the kernel that is being used at boot. Unlike the Android model where you can flash and only use one at a time, it would seem the kernels are almost hot swappable via grub. I should have expected such functionality.</p>

<p><code>
grub2-mkconfig -o /boot/grub/grub.cfg
</code></p>

<p>So as it turned out, getting grub to re-run the OS scanner and reconfigure itself allowed it to pick up both kernels, and 3.11 and 3.14 are both selectable at boot time. Such fine grained control should have been expected. I&rsquo;m a little surprised that I had never come across this in any of my kernel building tutorials, but I should probably blame myself for not having ran a real multi-boot linux machine in a long time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 11: Triple Threat]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/06/05/day-11-triple-threat/"/>
    <updated>2014-06-05T19:32:13-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/06/05/day-11-triple-threat</id>
    <content type="html"><![CDATA[<p>Much of my job consists of taking my computers&hellip; and destroying them. Well, I&rsquo;m not supposed to be destroying them, and I&rsquo;m not necessarily trying to either, but usually in testing LVM I manage to find one way or another to make the machines unbootable. Thankfully, due to the wealth of LVM information out there, more often than not I am capable of fixing the problems that develop on my laptop, but for the desktops it&rsquo;s usually just less effort to reformat them and try something different.</p>

<p><img class="center <a" src="href="http://imgs.xkcd.com/comics/computer_problems.png">http://imgs.xkcd.com/comics/computer_problems.png</a>"></p>

<p>I was going to put in that <a href="http://xkcd.com/349/">other xkcd</a> relating to computer problems, but this one seems more appropriate.</p>

<p>Now don&rsquo;t get me wrong, breaking the computers isn&rsquo;t necessarily <em>bad</em>. The actual problem is the fact that usually they break because of something that <em>I</em> do to them that&rsquo;s out of line. But then I learn so even that isn&rsquo;t a lose-lose situation. In reality, if I could find something that the user would expect to work according to the documentation that consistently (this being the key word here) breaks the machine, then I can create a bugzilla report from that.</p>

<p>So today&rsquo;s big news was that I had all three computers down, and was gong back and forth between them all frantically trying to fix them. For the laptop that means making sure I can still boot to my fedora installâ€“- this usually means fixing it from the rhel7 release candidate dual boot. For the other two computers, it&rsquo;s reformatting them and deciding on a new order / seeing what exactly went wrong during the latest install. Although Red Hat has a network boot system with a bunch of system installers on it, I usually find it easier to use my usb with rhel7 on it.</p>

<p>I&rsquo;m pretty picky with bugs, but I am surprised by how it can sometimes be very simple to break the boot order. That being said, I am practically playing with fire here with some of the commands that I run.</p>

<p><code>
mkfs.ext4 /dev/mapper/vg-thinpool
</code></p>

<p>The above command will format the thinpool and at first I was surprised that it worked, but in retrospect I don&rsquo;t know how it could be prevented. Upon running it my thin volumes that were within that pool seemed totally broken (and I can&rsquo;t say that I didn&rsquo;t expect them to be.)</p>

<p>Another caveat that frequently and still catches me is when I&rsquo;m playing around with a ramdisk via loop back device as discussed a few posts ago. If one reboots without running <code>vgreduce</code> to remove the loopback device from the volume group, chaos usually ensues.</p>

<p>When it&rsquo;s all said and done though, hopefully I can find some combination that people haven&rsquo;t accounted for that will destroy the systems. And until then, hopefully I can understand how and why the machine are actually breaking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 10: Snapshot Restore Aftermath]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/06/04/day-10-snopshot-restore-aftermath/"/>
    <updated>2014-06-04T19:31:40-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/06/04/day-10-snopshot-restore-aftermath</id>
    <content type="html"><![CDATA[<p>So today I thought I&rsquo;d through caution to the wind and just restore one of the daily snapshots that I had lying around from the cron job. This turned out to be not such a great idea&hellip; Despite being in charge of reviewing the documentation, it was not so obvious to me that upon merging one of the snapshots from my &ldquo;Time Machine&rdquo; the other ones would be de-linked as snapshots, and simply exist as thin volumes within the pool. This is pretty upsetting, as the inability to merge the snapshots that I have diminishes their value&hellip; Or so I thought.</p>

<p>You see, as it turns out, and as I probably should have realized, merging thin snapshots isn&rsquo;t the only way to restore one of these snapshots. Since at a lower level device mapper is taking care of the bytes within the thin pool, I can simply rename the snapshot I want to restore&rsquo;s thin volume to my current one and swap them. As I&rsquo;ve been backing up my home directory, I&rsquo;ll obviously have to do this either as root or from another volume, but such was the case with merging as well.</p>

<p><code>
lvrename vg/cur_home old_home
lvrename vg/snap_to_restore cur_home
</code></p>

<p>In addition to that, the skip automatic activation flags should be set up accordingly, and at the very least the new home volume should have it turned off. This is that weird <code>-k</code> stuff.</p>

<p><code>
lvchange -kn vg/cur_home
lvchange -ky vg/old_home
</code></p>

<p>And then on the next reboot all was well&hellip; With the exception of <code>lvs</code> looking a bit messier now (as you can tell when a point has been restored from by looking at the origins).</p>

<p><img class="center" src="/deku-scrub/blag/images/IMG_20140604_162029.jpg"></p>

<p>In other news, I&rsquo;ve received another monitor. Still only one mouse and keyboard, but swapping those isn&rsquo;t nearly as tedious as swapping monitors, so that&rsquo;s pretty useful. Above is my current setup, and below are more pics.</p>

<p><img class="center" src="/deku-scrub/blag/images/IMG_20140604_162037.jpg"></p>

<p>Here&rsquo;s desk space here if I ever need to write anything down. I was considering splaying some papers there to make it look like it was in use, but that would be weird.</p>

<p><img class="center" src="/deku-scrub/blag/images/IMG_20140604_162042.jpg"></p>

<p>I&rsquo;d move the other one to the floor, but until I get an extension cord moving the first one isn&rsquo;t much of an option. This bottom one is the one with the removable hard disks, so in retrospect perhaps I should have left it on the desk instead of having to lean down to remove a disk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 09: RAM disks and Write Speeds]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/06/03/day-09-ram-disks-and-write-speeds/"/>
    <updated>2014-06-03T19:31:20-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/06/03/day-09-ram-disks-and-write-speeds</id>
    <content type="html"><![CDATA[<p>As discussed in yesterday&rsquo;s post, caching is beneficial when a large slow volume is assisted by a fast small one. While it isn&rsquo;t a practical use for production, my manager suggested I could emulate this faster behavior by using a ramdisk, as 2/3 of my machines don&rsquo;t have flash storage. A <a href="http://en.wikipedia.org/wiki/RAM_drive">RAM disk</a>, (which, from this point on, I shall continue going back and forth between &ldquo;RAM disk&rdquo; and &ldquo;ramdisk&rdquo; spellings) allows a piece of memory to be sectioned off and mounted like a disk would. This means it no longer performs it&rsquo;s RAM duties of storing memory, and the computer effectively treats your computer has having that much less RAM.</p>

<p><code>
mkdir /mnt/ramdisk
mount -t tmpfs -o size=4096m tmpfs /mnt/ramdisk
</code></p>

<p>Those commands will create a ramdisk on a linux system. <a href="http://www.tekrevue.com/tip/how-to-create-a-4gbs-ram-disk-in-mac-os-x/">Mac instructions here</a>. You can then test the write speed, and note how much faster the RAM disk reacts than your disk originally had.</p>

<p>```</p>

<h1>dd if=/dev/zero of=/mnt/ramdisk/disk.img bs=1m count=4096</h1>

<p>4194304000 GB transferred in 4.0 GB/s</p>

<h1>dd if=/dev/zero of=~/disk.img bs=1m count=4000</h1>

<p>4194304000 GB transferred in 300 MB/s
```</p>

<p>As seen there, the RAM is much faster. There are a couple of issues of course. The biggest one is when you reboot the ramdisk won&rsquo;t just be unmountedâ€“ it will be totally deleted. So you can&rsquo;t really rely on it for anything. In fact, the linux commands I listed above use <a href="http://en.wikipedia.org/wiki/Tmpfs">tmpfs</a>, which is designed to optimize things in such a situation.</p>

<p>There&rsquo;s another problem, though. I wanted to use the RAM disks as physical volumes on which to extend a volume group over to use it with lvmcache. AFAIK, the only way to do this is via a loopback device, as &ldquo;mounting&rdquo; the ramdisk doesn&rsquo;t actually count as a device in <code>/dev</code>, which is required to create a physical volume.</p>

<p><code>
losetup /mnt/ramdisk/disk.img /dev/loop1
</code></p>

<p>And after this, it can be formatted as an LVM2 Physical Volume and added to the volume group.</p>

<p><code>
pvcreate /dev/loop1
vgextend volume_group /dev/loop1
</code></p>

<p>There is a caveat to this though, which has hurt me on a couple of occasions&mdash; since the loopback device is temporary, once the computer reboots the physical device won&rsquo;t exist anymore. Normally that would mean the data on that device wouldn&rsquo;t be accessible, but as that device was part of a volume group, the volume group becomes inconsistent, and won&rsquo;t be able to be mounted until it is properly repaired.</p>

<p>To prevent this, prior to rebooting the following command needs to be executed:</p>

<p><code>
vgreduce volume_group /dev/loop1
</code></p>

<p>And the following command will attempt to backtrack you out of the situation where one forgets to do that prior to it, and needs to recover the volume group to access the logical volumes on it. Not that anyone would <em>ever</em> do that.</p>

<p><code>
vgreduce volumegroup --removemissing
</code></p>

<p>(Yeah, I&rsquo;ve more recorded these for myself to reference at a later date, so what.)</p>
]]></content>
  </entry>
  
</feed>
