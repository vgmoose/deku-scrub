<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lvmthin | Deku Scrub]]></title>
  <link href="//vgmoose.github.io/deku-scrub/blag//blog/categories/lvmthin/atom.xml" rel="self"/>
  <link href="//vgmoose.github.io/deku-scrub/blag//"/>
  <updated>2014-06-15T04:18:11-04:00</updated>
  <id>//vgmoose.github.io/deku-scrub/blag//</id>
  <author>
    <name><![CDATA[Ricky Ayoub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day 11: Triple Threat]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/06/05/day-11-triple-threat/"/>
    <updated>2014-06-05T19:32:13-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/06/05/day-11-triple-threat</id>
    <content type="html"><![CDATA[<p>Much of my job consists of taking my computers&hellip; and destroying them. Well, I&rsquo;m not supposed to be destroying them, and I&rsquo;m not necessarily trying to either, but usually in testing LVM I manage to find one way or another to make the machines unbootable. Thankfully, due to the wealth of LVM information out there, more often than not I am capable of fixing the problems that develop on my laptop, but for the desktops it&rsquo;s usually just less effort to reformat them and try something different.</p>

<p><img class="center <a" src="href="http://imgs.xkcd.com/comics/computer_problems.png">http://imgs.xkcd.com/comics/computer_problems.png</a>"></p>

<p>I was going to put in that <a href="http://xkcd.com/349/">other xkcd</a> relating to computer problems, but this one seems more appropriate.</p>

<p>Now don&rsquo;t get me wrong, breaking the computers isn&rsquo;t necessarily <em>bad</em>. The actual problem is the fact that usually they break because of something that <em>I</em> do to them that&rsquo;s out of line. But then I learn so even that isn&rsquo;t a lose-lose situation. In reality, if I could find something that the user would expect to work according to the documentation that consistently (this being the key word here) breaks the machine, then I can create a bugzilla report from that.</p>

<p>So today&rsquo;s big news was that I had all three computers down, and was gong back and forth between them all frantically trying to fix them. For the laptop that means making sure I can still boot to my fedora installâ€“- this usually means fixing it from the rhel7 release candidate dual boot. For the other two computers, it&rsquo;s reformatting them and deciding on a new order / seeing what exactly went wrong during the latest install. Although Red Hat has a network boot system with a bunch of system installers on it, I usually find it easier to use my usb with rhel7 on it.</p>

<p>I&rsquo;m pretty picky with bugs, but I am surprised by how it can sometimes be very simple to break the boot order. That being said, I am practically playing with fire here with some of the commands that I run.</p>

<p><code>
mkfs.ext4 /dev/mapper/vg-thinpool
</code></p>

<p>The above command will format the thinpool and at first I was surprised that it worked, but in retrospect I don&rsquo;t know how it could be prevented. Upon running it my thin volumes that were within that pool seemed totally broken (and I can&rsquo;t say that I didn&rsquo;t expect them to be.)</p>

<p>Another caveat that frequently and still catches me is when I&rsquo;m playing around with a ramdisk via loop back device as discussed a few posts ago. If one reboots without running <code>vgreduce</code> to remove the loopback device from the volume group, chaos usually ensues.</p>

<p>When it&rsquo;s all said and done though, hopefully I can find some combination that people haven&rsquo;t accounted for that will destroy the systems. And until then, hopefully I can understand how and why the machine are actually breaking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 10: Snapshot Restore Aftermath]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/06/04/day-10-snopshot-restore-aftermath/"/>
    <updated>2014-06-04T19:31:40-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/06/04/day-10-snopshot-restore-aftermath</id>
    <content type="html"><![CDATA[<p>So today I thought I&rsquo;d through caution to the wind and just restore one of the daily snapshots that I had lying around from the cron job. This turned out to be not such a great idea&hellip; Despite being in charge of reviewing the documentation, it was not so obvious to me that upon merging one of the snapshots from my &ldquo;Time Machine&rdquo; the other ones would be de-linked as snapshots, and simply exist as thin volumes within the pool. This is pretty upsetting, as the inability to merge the snapshots that I have diminishes their value&hellip; Or so I thought.</p>

<p>You see, as it turns out, and as I probably should have realized, merging thin snapshots isn&rsquo;t the only way to restore one of these snapshots. Since at a lower level device mapper is taking care of the bytes within the thin pool, I can simply rename the snapshot I want to restore&rsquo;s thin volume to my current one and swap them. As I&rsquo;ve been backing up my home directory, I&rsquo;ll obviously have to do this either as root or from another volume, but such was the case with merging as well.</p>

<p><code>
lvrename vg/cur_home old_home
lvrename vg/snap_to_restore cur_home
</code></p>

<p>In addition to that, the skip automatic activation flags should be set up accordingly, and at the very least the new home volume should have it turned off. This is that weird <code>-k</code> stuff.</p>

<p><code>
lvchange -kn vg/cur_home
lvchange -ky vg/old_home
</code></p>

<p>And then on the next reboot all was well&hellip; With the exception of <code>lvs</code> looking a bit messier now (as you can tell when a point has been restored from by looking at the origins).</p>

<p><img class="center" src="/deku-scrub/blag/images/IMG_20140604_162029.jpg"></p>

<p>In other news, I&rsquo;ve received another monitor. Still only one mouse and keyboard, but swapping those isn&rsquo;t nearly as tedious as swapping monitors, so that&rsquo;s pretty useful. Above is my current setup, and below are more pics.</p>

<p><img class="center" src="/deku-scrub/blag/images/IMG_20140604_162037.jpg"></p>

<p>Here&rsquo;s desk space here if I ever need to write anything down. I was considering splaying some papers there to make it look like it was in use, but that would be weird.</p>

<p><img class="center" src="/deku-scrub/blag/images/IMG_20140604_162042.jpg"></p>

<p>I&rsquo;d move the other one to the floor, but until I get an extension cord moving the first one isn&rsquo;t much of an option. This bottom one is the one with the removable hard disks, so in retrospect perhaps I should have left it on the desk instead of having to lean down to remove a disk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 07: Daily Time Machine]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/05/30/day-07-daily-time-machine/"/>
    <updated>2014-05-30T22:17:38-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/05/30/day-07-daily-time-machine</id>
    <content type="html"><![CDATA[<p>Happy Friday! I finally feel like I&rsquo;m becoming well-versed with these LVM commands. I&rsquo;m also starting to feel a lot more comfortable in general. It might just be because we&rsquo;re using Thinkpads, but this laptop has byfar been the most comfortable linux experience I&rsquo;ve had to date. There are still very minor things that are preventing me from using it all the time (some as major as the trackpad being awful, and some as minor as the default gnome drop shadow size) but it is all around very pleasant. Maybe I&rsquo;m being brainwashed by Red Hat, but I&rsquo;m also probably gonna swap out my home server with Fedora instead of Debian.</p>

<p>But that&rsquo;s ALL besides the point. Today I set up a cool thing which I shall now share with you now.</p>

<p>```</p>

<h1>lvs</h1>

<p>  LV            VG    Attr       LSize  Pool    Origin Data%  Meta%
  homey         purin Vwi-aotz&mdash;  1.00t thinset          2.24   <br/>
  &hellip;
  snap05.30.14e purin Vwi&mdash;-tz-k  1.00t thinset homey           <br/>
  snap05.30.14m purin Vwi&mdash;-tz-k  1.00t thinset homey           <br/>
  snap06.01.14e purin Vwi&mdash;-tz-k  1.00t thinset homey           <br/>
  thinset       purin twi-a-tz&mdash; 50.00g                 47.15  25.06
```</p>

<p>Here you can see that I have a 50G lvm thin pool called &ldquo;thinset&rdquo; (at the bottom), and within this pool is a logical thin volume called &ldquo;homey&rdquo;. Then there are three snapshots that use &ldquo;homey&rdquo; as their origin, meaning they are a snapshot of &ldquo;homey,&rdquo; and will copy the required bytes on write to maintain their snapshot state.</p>

<p>What ISN&rsquo;T shown here is that I currently have the &ldquo;homey&rdquo; LV mounted at <code>/home</code></p>

<p>```</p>

<h1>df -h</h1>

<p>Filesystem               Size  Used Avail Use% Mounted on
/dev/mapper/purin-homey 1008G  6.0G  951G   1% /home
```</p>

<p>There are the usual interesting things about lvmthin volumes that you can note here, such as <code>df</code> believing the filesystem only has 1% of its &ldquo;1008G&rdquo; used, when in reality the thin pool only has 50G that it is able to allocated. But you can also see that I have snapshots of the form <code>snapMM.DD.YY(e/m)</code>, which are taken daily on that date (with e for evening and m for morning). This was configured via <code>cron</code> by editing <code>/etc/crontab</code> to have the following new lines appended:</p>

<p><code>
  0  10 *  *  * root       lvcreate -s purin/homey -n snap$(date +\%m.\%d.\%y)m
  0  17 *  *  * root       lvcreate -s purin/homey -n snap$(date +\%m.\%d.\%y)e
</code></p>

<p>Making my snapshot commands being run on the 10th (10AM) and 17th (5PM) hours of each day. It&rsquo;s also worth noting that <code>anacron</code> could be used if I wanted to queue up the snapshots for when the computer was powered down, but that isn&rsquo;t desired behavior, at least not for me.</p>

<p>You might be thinking to yourself &ldquo;Okay who cares about cron what does that really have to do with your internship?&rdquo; To which I respond it&rsquo;s just cool, okay?! SHARING IS CARING.</p>

<p>Some more things to note here is that I did have to create the &ldquo;homey&rdquo; LV from nothing and manually copy over my files from my old <code>/home</code>. This is due to the fact that I needed it to be within a thin pool, and you can only take thin snapshots of an external origin (LV that isn&rsquo;t within a thin pool) when that source is read-only. I thought I&rsquo;d just start it all over.</p>

<p><code>
lvconvert --merge purin/snapMM.DD.YYz
</code></p>

<p>The above command can be run (when <code>/home</code> isn&rsquo;t mounted) to rollback to the given snapshot day. I&rsquo;ve tested it a little bit so far and it has been successful, but it should get a lot more interesting once I have a bunch of snapshots to go off. If one tries to <code>lvconvert</code> while the origin is mounted, the merge will be queued until the next mount of the <strong>snapshot</strong>. This actually took me a while to learn. And don&rsquo;t forget, to activate a thin snapshot one needs to pass the <code>-K</code> flag as mentioned in an earlier blog post.</p>

<p>I have a couple more questions in my head about this mysterious, magical snapshot process. The big ones are: What happens to garbage files, like if I were to run <code>dd if=/dev/zero of=file.out bs=4k count=5000000</code>? Would the resulting 10G file be kept around in the thinpool? And if so, how could that easily be detached from all the snapshots? And another question is, in the output from <code>lvs</code> above, why is the data percent so high? I am not using 2% of 1T, as seen in <code>df</code> my home directory is only 6G, and 2% of 1T is 20G. Is that <em>because</em> I ran commands similar to that <code>dd</code> one? Not that I <em>did</em>.</p>

<p>I have a feeling Monday&rsquo;s post is going to involve ram disks and dm-cache, so stay tuned and try not to fall off the edge of your seat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 05: Thinly Provisioned Snapshots]]></title>
    <link href="//vgmoose.github.io/deku-scrub/blag//blog/2014/05/28/day-05-thinly-provisioned-snapshots/"/>
    <updated>2014-05-28T22:54:34-04:00</updated>
    <id>//vgmoose.github.io/deku-scrub/blag//blog/2014/05/28/day-05-thinly-provisioned-snapshots</id>
    <content type="html"><![CDATA[<p>In yesterday&rsquo;s post I introduced LVM snapshots and why they are useful. It may have gotten lost a bit in the jumble of comamnds. To recap, snapshots <em>physically</em> store only the differences between a filesystem at a given time and the present. Using the differences (which of course are much smaller than the entire filesystem) one can mount and reconstruct the filesystem from the point when the snapshot was created.</p>

<p>That, of course, is really cool, but let&rsquo;s say you want to take a TON of snapshots (like we&rsquo;re talking daily ones). The daily snaps would allow you to easily revert to what the filesystem looked like on a given day without using much more space. Of course, if they were just regular LVM snapshots, you&rsquo;d need to decide on a size to give them. Taking daily snapshots in this manner would fill up in no time.</p>

<p><img class="center" src="/deku-scrub/blag/images/uglydiagram.png"></p>

<p>A thin pool is a logical volume. You give it a set size, and it is that size, much like a logical volume. The total amount of bytes cannot exceed that size ever, and if it does you&rsquo;ll have to resize it. Making one is as follows:</p>

<p><code>
lvcreate --thinpool vg/thin_pool --size 30G
</code></p>

<p>Where vg is the volume group. Nothing special <em>so far</em>. What&rsquo;s amazing though, is within this pool can exist filesystems that just <strong>straight up lie</strong> about how much space they have left. See the 100TB volume within the pool in the diagram above. You can mount that logical volume and it will appear to the computer as a 100TB volume. To create it within <code>thin_pool</code>, issue the following commands:</p>

<p><code>
lvcreate -T vg/thin_pool -V 100T -n big_filesystem
</code></p>

<p>Note the use of the <code>-V</code>  argument for virtual size. Why is this useful? It allows for the volume to dynamically take up space as it needs. Let&rsquo;s say you put 2GB worth of files on this &ldquo;100TB filesystem.&rdquo; Physically, only 2GB worth of data will be <strong>allocated</strong>. Meaning, you can continue to create logical volumes within the pool that will expand up to their maximum virtual size. So this time, when we create our snapshots, their space doesn&rsquo;t matter! They will dynamically expand within the pool to the necessary size (which will be the size of the differences between them in the original). Obviously the <a href="https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Logical_Volume_Manager_Administration/thinly-provisioned_snapshot_volumes.html">official documentation</a> does a better job of explaining this, but I thought I&rsquo;d give it a try.</p>

<p><code>
lvcreate -s vg/big_filesystem -n snappy
</code></p>

<p>Another added bonus of being within the pool is that the thin snapshots will share common data with <em>each other</em> too. This would have also been wasted duplicated space. These enhancements change the game of snapshots from a useful way to get a O(1) image of the filesystem to a meaningful way of storing the filesystem at any point and time.</p>

<p>QUICK CAVEAT. I got hung up on this for a long time. Thin snapshots have a special case when they are generated and are <strong>not</strong> automatically marked active to be mountable in <code>/dev</code>. You can view this information using <code>lvscan</code>. You will see any thin snapshots are marked inactive. Normally to mark a volume active, you&rsquo;d simply perform:</p>

<p><code>
lvconvert -ay vg/lv
</code></p>

<p>However, as thin snapshots have the special flag set to not be marked active, you need to modify this to look like:</p>

<p><code>
lvconvert -ay -K vg/lv
</code></p>

<p>That simple <code>-K</code> argument drove me crazy for a bit. It was mentioned in the documentation, but I must have passed by it. As leaving <code>-K</code> out silently fails, I wasn&rsquo;t sure if my build of lvm2 was broken or what (as it would just not mark it active without telling me it failed).</p>

<p>With this knowledge it is possible to easily create daily full snapshots of an entire filesystem without taking up any more space than would have been taken up by the difference bytes. The thin volumes will dynammically expand to fill the pool, so one does not have to worry at all about the sizes of the snapshots (in fact, you aren&rsquo;t allowed to set it for a thin snapshot). The <a href="http://wiki.gentoo.org/wiki/LVM">Gentoo Wiki</a> actually has really good instructions and easy to follow commands on all of this if you don&rsquo;t want to take my word for them (or in the more likely case, if i&rsquo;ve left something out).</p>
]]></content>
  </entry>
  
</feed>
